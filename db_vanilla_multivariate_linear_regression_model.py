# -*- coding: utf-8 -*-
"""db_vanilla_Multivariate_Linear_Regression_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17lVXtFiRoL-Ha4fUlCo0CFbI4mbj_2nj

# Multivariate Linear Regression
## Predicting House Price from Size and Number of Bedrooms
"""

# evaluate logistic regression on the breast cancer dataset with an ordinal encoding
from numpy import mean
from numpy import std
from pandas import read_csv
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OrdinalEncoder
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
# define the location of the dataset
url = "https://storage.googleapis.com/dataprep-staging-b4c6b8ff-9afc-4b23-a0d8-d480526baaa4/yz1268%40nyu.edu/jobrun/Untitled%20recipe%20%E2%80%93%204.csv/2021-08-16_23-54-42_00000000"
# load the dataset
#the data imported from my google storage with this url link above has this format:
#healthcare_coverage,age,race, ethnicity, gender, latitude, longitude,healthcare expense.
#for example, in order to read the first column, we can do data[:,0:1]. In order to read the column from second column to the sixth column, we can do data[:,1:7],which also follows the array operation in python.
dataset = read_csv(url, header=None)
# retrieve the array of data
data = dataset.values
# separate into input and output columns
X = data[:, 1:7]
y = data[:, 0:1]
print(X)
# split the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.01, random_state=1)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)
# Predicting the Test set results
y_pred = regressor.predict(X_test)

# define the model
model = LinearRegression()
# fit on the training set
model.fit(X_train, y_train)
# predict on test set
yhat = model.predict(X_test)

print('Coefficients: \n', model.coef_)
print(type(regressor.coef_))
#these params are what we need and got from the trainnnig the model. Now we can use these parameters to create a formular for pricing the health insurance quota.
# evaluate predictions
#accuracy = accuracy_score(y_test, yhat)

accuracy = mean_squared_error(y_test, yhat)
#this name of accuracy is a little misleading, to be more specific, it is mean_sqaured_error.
print('Accuracy: %.2f' % (accuracy))

# evaluate logistic regression on the breast cancer dataset with an ordinal encoding
from numpy import mean
from numpy import std
from pandas import read_csv
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import OrdinalEncoder
from sklearn.metrics import accuracy_score
#from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor, ExtraTreesRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error

# define the location of the dataset
url = "https://storage.googleapis.com/dataprep-staging-b4c6b8ff-9afc-4b23-a0d8-d480526baaa4/yz1268%40nyu.edu/jobrun/Untitled%20recipe%20%E2%80%93%204.csv/2021-08-16_23-54-42_00000000"
# load the dataset
dataset = read_csv(url, header=None)

# retrieve the array of data
data = dataset.values

# separate into input and output columns
#X = data[:, :-1].astype(str)
#y = data[:, -1].astype(str)
X = data[:, 1:7]
y = data[:, 0:1]

# split the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

# ordinal encode input variables
#ordinal_encoder = OrdinalEncoder()
#ordinal_encoder.fit(X_train)
#X_train = ordinal_encoder.transform(X_train)
#X_test = ordinal_encoder.transform(X_test)
# ordinal encode target variable

#label_encoder = LabelEncoder()
#label_encoder.fit(y_train)

#y_train = label_encoder.transform(y_train)
#y_test = label_encoder.transform(y_test)

# define the model
model = LinearRegression()

# fit on the training set
model.fit(X_train, y_train)

# predict on test set
yhat = model.predict(X_test)
#yhat is defined as the predicted value y

# evaluate predictions
#accuracy = accuracy_score(y_test, yhat)

#It's because accuracy_score is for classification tasks only. For regression you should use something different, for example:
accuracy = mean_squared_error(y_test, yhat)
print('Accuracy: %.2f' % (accuracy*100))